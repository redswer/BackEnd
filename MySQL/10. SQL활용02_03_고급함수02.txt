-----------------------------------------------------
=====================================================

-- 다양한 함수 및 함수의 응용
--  IF, IFNULL, Case 

-----------------------------------------------------
=====================================================

*** IF
 
=> IF(condition, value_if_true, value_if_false)
=> 중첩 적용 가능
	-> select sno, name, jno, IF(jno=7,'관리자','학생') ifTest from student;
	-> 짝수조, 홀수조 출력하기
		 select sno, name, jno, IF(jno%2=0, '짝수조', '홀수조') 짝홀 from student;

	-> 1이면 일조, 2는 이조 ....
     select sno, name, jno, IF(jno=1, '일조', 
		 												IF(jno=2, '이조', 
														IF(jno=3, '삼조', 
														IF(jno=4, '사조',
														IF(jno=5, '오조','칠조'))))) 조이름 from student;

 	-> select id, name, lev, IF(lev='A', '관리자', '일반')  from mymember ;
	-> A 관리자, B 나무, C 잎새, D 새싹  이 출력 되도록 작성
	    select id, name, lev, IF(lev='A', '관리자', IF(lev='B', '나무', IF(lev='C', '잎새', '새싹'))) 회원등급 from mymember;

-----------------------------------------------------

** IFNULL
 
=> IFNULL(column_name, value) 
    해당 필드의 값이 NULL 을 반환할 때, 지정한 값으로 대체하여 출력
=> 중첩 적용 가능
	-> select IFNull(Null, 123) , IFNull('Test', 123);
	-> student 의 address 에 적용: Null 이면 Error 로 출력하기
			select sno, name, address, IfNull(address,'Error') from student;
	
=> Auto Numbering 에 활용됨
	-> Auto Numbering : sno 의 최대값에 +1  Max(sno)+1
	insert into student(sno, name, age, info, jno, point, birthday) 
	values((select * from (select IFNull(Max(sno), 0)+1 from student) as temp)
						, '김그린',22,'IfNull Test', 8, 200, '1999-05-05');

	-> 실습준비
		-	student 와 동일한 구조를 가진 student5 생성 (제약조건은 동일하지 않아도 됨) 			
			create table student5 select * from student where 1=2;
		- Data 없는 상태에서 Max(sno) 확인하기
			select Max(sno), Max(sno)+1, IFNULL(Max(sno), 0) from student5;	

	-> IFNULL 을 적용한 입력문 만들기
			insert into student5(sno, name, age, jno )	
			values((select * from (select IFNULL(Max(sno),0)+1 from student5) as temp)
							, "김그린", 22, 7);

-----------------------------------------------------

** Case   
 
=> 기본형식
	select  컬럼들,
		CASE WHEN 조건1 THEN 조건별 값
		     WHEN 조건2 THEN 조건별 값
		      .....
		     ELSE 값 
		END Test(앨리어스)
	from student ;

=> IF -> Case 로 변경하기

	select sno, name, jno, 
		Case When jno=1 Then '일조'
		     When jno=2 Then '이조'	
		     When jno=3 Then '삼조'	
		     When jno=4 Then '사조'	
		     When jno=5 Then '오조'		
		     Else 'Test조'
		End cTest
	from student;

=> student 에서 point 값 에 따라 grade 구분
	-> 200점 초과 500까지 :  'VVIP회원',  
	    150~200  :  'VIP회원',
	    150 미만  :  '일반' 
	    해당안되면 : 'Error' 로  나누고,  point 에는 '점' 을 붙여 출력
	select sno, name, Concat(point,'점'), 
		Case 	When point>200 And point<=500 Then 'VVIP'
					when point>=150 And point <=200 Then 'VIP'
					When point<150 Then '일반'
					Else 'Error'
		End Grade
	from student;

	-> Between 적용하기
	//  실수형Data 를 적용하는 경우엔 경계 값에서 사각지대 가 있을 수 있으므로 주의
	select sno, name, point, 
		Case 	When point Between 201 And 500 Then 'VVIP'
					when point Between 150 And 200 Then 'VIP'
					When point<150 Then '일반'
					Else 'Error'
		End Grade
	from student;	

	-> Data 수정 후 Test (경계값에 소수이하 자리가 있도록) 위의 구문 실행해보기
	    89번의 point 값 200 에 0.5 를 더해주세요 ~~
	update student set point=point+0.5 ;  // 모두 수정해도 무관
	// 경계 값에서 누락되는 자료가 있을 수 있음 확인

	-> 구간의 사각지대 존재
	-> 비교 :  실수형에 BETWEEN 을 적용하면 사각지대 발생 : 60.1 ~60.99999 까지 제외됨  
	-> Between 적용
	select id, name,  Concat(point,' 점') Point,  
		      Case When point <=250 Then 'Silver'
			When point BETWEEN 251 and 287 Then 'Gold'			
			When point BETWEEN 288 and 400 Then 'Platinum'
			Else 'Error' 
		       End grade
		       from student;	                                                            
	
	-> Between 적용하지않음
	select id, name,  Concat(point,' 점') Point,  
		      Case When point <=250 Then 'Silver'
			When point > 250 and point <= 287 Then 'Gold'			
			When point > 287 and point <= 400 Then 'Platinum'
			Else 'Error' 
		       End grade
		       from student;	   

( **  size 는 Oracle 예약어 ,
  **  rank, member(Table명) 는 MySQL 예약어, 앨리어스로 허용하지않음  )

** 실습 
=> student Table 에서 point 를 출력,  
	조별로    1조 :  age*2000 ,    2조 : age*5000/3 ,  3조 : age*jno*1000
		4조 :  age*7000/2 , 5조 : age*1500 ,     6조 : jno*6000
		select snum, sname, 
			case when jno = 1 then age * 2000
            			      when jno = 2 then age * 5000/3
            			      when jno = 3 then age * jno * 1000
             		      	when jno = 4 then age * 7000 / 2 
            			      when jno = 5 then age * 1500
            			      when jno = 6 then age * 6000
         		end point
		from student;

-----------------------------------------------------
=====================================================

*** EXISTS(서브 쿼리) , NOT EXISTS(서브 쿼리)

=> 데이터 존재여부를 확인하는 연산자
     즉, 데이터가 존재할 경우 / 존재하지 않을경우 특정 액션을 해야하는 상황에 사용하면 편리
=> Join 과 유사한 기능을 수행

-----------------------------------------------------

=> EXISTS(서브 쿼리) 
	EXISTS은 논리연산자 중의 하나로 후행 조건절로 서브쿼리 형태로만 올 수 있으며,
	서브 쿼리의 결과가 "한 건이라도 존재하면" TRUE 없으면 FALSE를 리턴하고 쿼리를 더 이상 수행하지 않는다.
	그러므로 서브쿼리에 데이터량이 많은경우 사용하면 성능에 도움이됨.

-----------------------------------------------------

=> NOT EXISTS(서브 쿼리)
	서브 쿼리의 결과가 "한 건도 존재하지 않으면" TRUE 존재하면 FALSE를 리턴한다

-----------------------------------------------------

=> 사용법

	SELECT 컬럼
	FROM 테이블
	WHERE EXISTS / NOT EXISTS
	(서브쿼리);

=> 사용예
	-> EXISTS : BBB 에 데이터가 있는 AAA 데이터 출력 
	SELECT * FROM AAA A WHERE EXISTS
	( SELECT * FROM BBB B
   		WHERE A.CODE = B.CODE ) ;

  -> NOT EXISTS : BBB 에 데이터가 없는 AAA 데이터 출력 
	SELECT * FROM AAA A WHERE NOT EXISTS
	( SELECT * FROM BBB B
   		WHERE A.CODE = B.CODE ) ;
   
  -> Update, Delete 에 적용가능
	-> NOT EXISTS : BBB 에 데이터가 없는 AAA 데이터 삭제 
	DELETE FROM AAA A WHERE NOT EXISTS
	( SELECT * FROM BBB B
   		WHERE A.CODE = B.CODE ) ;		

	-> 서브퀴리의 SELECT 절에 컬럼은 불필요하기 때문에 형식적으로 의미없는 1을 기입하기도 함

=> 실습 1
	-> jno 가 jo Table 에 있는 경우만 student 출력하기
		select sno, name, s.jno from student s
		where EXISTS ( select jno from jo j where j.jno=s.jno ) ; 
	
	-> jno 가 jo Table 에 없는 경우만 student 출력하기
		select sno, name, jno, info from student s
		where Not Exists (select * from jo j where j.jno=s.jno) ; 

	-> jno 가 jo Table 에 없는 경우만 info 를 "조 없음" 으로 출력하기
		select sno, name, jno,  Replace(info, info, "조 없음") info from student s
		where Not Exists (select 1 from jo j where j.jno=s.jno );

	-> Update 적용
			jno 가 jo Table 에 없는 경우의 student, info 를 "조 없음" 으로 수정하기
		update student s set info = "조 없음"
		where Not Exists (select * from jo j where j.jno=s.jno) ; 
	
	-> 조장 아닌 학생만 출력하기
	select sno, name, jno, info from student s
	where Not Exists (select * from jo j where j.captain=s.sno) ; 

=> 실습 2 활용 및 구문 비교
	** student 에서 조장만 출력하기
	-> EXISTS
	select sno, name, jno from student s
	where EXISTS (select * from jo j where j.captain=s.sno) ;

	-> IN 복습 : 1,4,5 만 출력 
	select sno, name, jno from student
	where jno IN (1, 4, 5); // jno=1 or jno=4 or jno=5;

	-> IN + sub_Query 와 비교 ( 조장 출력하기 )
	select sno, name, jno from student 
	where  sno IN ( select captain from jo where captain=sno ) ;

	-> 비교 (결과는 동일하지만 비효율적)
	select sno, name, jno from student 
	where  sno IN (select captain from jo);	

	-> Join 과 비교 ( 조장 출력하기 )
	위와 동일 : jo 에 일치하는 chief 가 존재하는 경우에만 출력 
	select sno, name, s.jno from student s, jo j
	where s.sno=j.captain ;

=> 실습3 복합구문 응용
	-> student 중 jo , captain 에 id 가 존재하면 "조장" / 아니면 "조원" 출력하기 
	select sno, name, s.jno, 
	Case When Exists(select 1 from jo where captain = sno) Then  "조장"
	       Else "조원"
	End 구성	
 	from student s; 
 
	-> mymember 중 board 에 글이 있으면 'Yes' 출력하기
 	select m.id, m.name , m.lev, 
		CASE When Exists (Select 1 from board b where b.id=m.id)
		        Then 'Yes'
		END writeBoard
   		from mymember m ; 

	-> 조건추가 ( lev 가 'A' 아닌경우 에만 출력)
	    lev B~D 중에 board 에 글쓴적 있는 member 는 'Yes' 출력
	select m.id, m.name , m.lev, 
		CASE When Exists (Select 1 from board b where b.id=m.id)
		        Then 'Yes'
		END writeBoard
  from member m where m.lev>'A' ; 

-----------------------------------------------------
=====================================================

=> 비교 test  (EXISTS 사용한 경우와 사용하지않은 경우 비교)
	
	-> dogkind 테이블에서 해당하는 강아지가 존재하는  kindcode 만 출력하기
	select kindcode, kindname, note
	from dogkind k 
	WHERE EXISTS(select kindcode from dog d where k.kindcode= d.kindcode) ;
	
	-> exists 사용하지않은 경우 비교 : DOG에 존재하는 만큼 모두 출력
	   ( d.dogno 또는 d.name 을 추가하고 확인해본다. )	
	select K.kindcode, kindname, note, D.NAME
	from dogkind k, dog d 
	WHERE k.kindcode= d.kindcode ;

-----------------------------------------------------
=====================================================
 	