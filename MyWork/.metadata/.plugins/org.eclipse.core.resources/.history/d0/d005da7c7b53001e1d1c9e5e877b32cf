package j13_generic;

import j07_classExtends.Ex00_Car;

//** Generic
//=> 컬렉션(Collection:자료구조) 을 보강해준 기능
//=> 컴파일 단계에서 객체의 자료형을 선언(정의) 해주면
// 다른 타입의 자료가 저장될수 없도록 해주는 기능

//** Generic 클래스 정의
//=> 클래스 이름 옆에 <> 사이에 알파벳 1글자를 사용하여 
// Generic Type 명을 선언해줌 
// ex : <T> 처럼 "<" 와 ">" 사이에 선언 
//=> 대문자로 T, E 등을 많이 사용 
// Type 의미로 "T" 를 주로 사용
//=> Generic 타입으로 클래스를 사용한다는 의미 
//=> 제네릭으로 기본 자료형(int, float, double....)은 사용할 수 없지만
// 기본자료형의 wrapper 클래스를 이용할 수있다. 

//** Generic 타입제한 (Wildcards_와일드카드타입 이용으로)
//=> <?>
// Unbounded Wildcards (제한없음_모든 클래스나 인터페이스 타입 가능)
//=> <? extends ...>
// Upper Bounded Wildcards (상위클래스 제한_같거나 하위 타입 가능)
//=> <? super ...>
// Lower Bounded Wildcards (하위클래스 제한_ 같거나 상위타입 가능)

// ===================================
// 1. Object 이용한 기존 방식
// => 모든 클래스는 Object 의 후손이므로
// => Object data = new String("Generic_Test"); 처럼 Object 타입으로 우측에 정의될 수 있음
// => 즉, 모든 클래스는 setData 의 매개변수가 될 수 있음

class Store {
	private Object data;

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}

}// Store

public class EX01_StoreTest {

	public static void main(String[] args) {
		// 1. Object 를 이용한 기존 방식

		Store s1 = new Store();
		s1.setData("짜장면");
		s1.setData(123); // int 는 Object 의 후손이 아니지만, Integer 로 자동 형변환되어 가능함
		s1.setData(123.456); // double 도 마찬가지로 Double 로 자동 형변환됨
		s1.setData(new Ex00_Car(100, 500, "Silver")); // => 위에 import 필요함
		s1.setData(123.456f);
		Float f = (Float) s1.getData();

	}// main

}// class