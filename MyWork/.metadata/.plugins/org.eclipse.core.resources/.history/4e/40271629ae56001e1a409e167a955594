package j15_enum;

//** Enum 클래스 (java.lang.Enum)
//=> 모든 열거형의 조상
//=> 열거형을 지원하는 다양한 메서드제공
// values(), valueOf(), name(), ordinal() 등
// ordinal() 은 열거형 상수가 정의된 순서를 정수로 반환 (0부터 시작)
// 그러나 이값은 내부적 용도이므로 열거형 상수의 값으로 사용하지 않는것이 좋다.

// => 계층도
// 	  Object -> Enum(A) -> Direction(E)

enum Direction {
	EAST, WEST, SOUTH, NORTH
}

public class Ex02_enumMethod {

	public static void main(String[] args) {
		// ** 열거형 Test
		Direction d1 = Direction.EAST;
		Direction d2 = Direction.valueOf("WEST"); // => String 타입으로 넣어야 함
		Direction d3 = Enum.valueOf(Direction.class, "SOUTH");
		Direction d4 = Direction.NORTH;

		System.out.printf("d1 = %s, d2 = %s, d3 = %s, d4 = %s\n", d1, d2, d3, d4);

		System.out.println("");
//		===============================
		// ** 배열 처리
		System.out.println("** 배열처리 Test");

		Direction[] ds = Direction.values();

		for (Direction d : ds) {
			System.out.printf("%s = %d\n", d.name(), d.ordinal());
		}

		System.out.println("");
//		===============================

		// ** 열거형 상수간의 비교
		// ** 열거형 상수간의 비교
		// => "==" 비교가능 (그러므로 equals() 보다 빠른 성능)
		// => 위 외의 관계연산자는 사용불가능
		// => compareTo 는 같으면 0, 왼쪽이 크면 양수, 오른쪽이 크면 음수
		// ordinal() 값으로 비교

		System.out.println("** 열거형 상수간의 비교 Test");

	}// main

}// class