package j10_exception;

// ** Exception

// 1) Exception 처리하지 않는 경우
// => Exception 발생 위치에서 비정상 종료

// 2) Exception 처리하는 경우
// => Exception 발생 시 대응을 하여 정상적인 진행

public class Ex01_Basic {

	public static void main(String[] args) {
		int x = 6, y = 3, result = 0;
		String s = "123000aaa";
		String[] names = { "Apple", "Banana", "Coffee" };

		// Test 1 : Exception 처리하지 않는 경우 -> 비정상 종료

//		y = 0;
//		result = x / y;

		System.out.println("** result 1 : " + result);
		// => Exception in thread "main" java.lang.ArithmeticException: / by zero

//		==================================
		// Test 2 : Exception 처리하는 경우

		try {
			result = x / y;
			System.out.println("result 2 : " + result);
			System.out.println("result 3 : " + (result += Integer.parseInt(s)));

			// ** Exception 에 다형성 적용
			// => Exception e = new 후손()
			// => 즉, Exception 의 모든 후손 Exception 들이 catch 블럭으로 전달됨
			// => 그러므로 각 Exception 별로 처리하는 것도 가능함
		} catch (ArithmeticException e) {
			System.out.println("** Exception : " + e.toString());
		} catch (NumberFormatException e) {
			System.out.println("** Exception : " + e.toString());
		} catch (Exception e) {
			System.out.println("** Exception : " + e.toString());
			// => Exception 이 모든 후손 Exception 을 포함하고 있으므로 가장 마지막에 정의해야 함

		} finally {
			System.out.println("** finally : 무조건 실행 **");
		}

		System.out.println("** 정상 종료 **");

	}// main

}// class