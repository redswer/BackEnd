package j05_classMethod;

//** 생성과정
//=> new 연산자가 해당되는 클래스를 메모리에 로드해서 생성함.
//=> 이때 생성직후 생성자메서드를 호출함

//** 생성자(Constructor) 메서드
//=> 클래스와 이름 동일하고, return 값이 없음. (void 조차도 생략됨)
//그러나 매개변수는 갯수, Type 제한 없음
//=> 생성시에 단한번 호출가능 
//=> 한 클래스의 생성자는 여러개 가능 (생성자 오버로딩) 
//=> 생성자를 작성하지 않으면 컴파일러가 자동으로 기본생성자를 만들어줌(Default Constructor)
//(단, 하나라도 생성자 메서드를 작성하면 Default 생성자는 자동으로 만들어지지않음)

//** 생성자 메서드에서 생성자 메서드 호출 가능 
//=> this(?,?,...)
//=> this(...) 은 반드시 생성자 메서드 내에서 첫줄에 위치해야함.

class Phone {
	String company;
	String number;
	int price;

	public int dataUp(int i) {
		return i * 100;
	}

	public String toString() {
		return "[ company = " + company + ", number = " + number + ", price = " + price + " ]\n";
	}

//	============================================================
	// 생성자
	// => 클래스와 이름이 동일하고 return 값 없음 (void 도 생략)

	public Phone(String company) {
		this.company = company;
		System.out.println("** company 생성자 호출");
	}

//	=============================================================
	// 디폴트 생성자
	// => 위에서 생성자를 추가하게 되면 default 생성자가 자동 생성되지 않기 때문에 필요하다면 직접 생성해 줘야 함
	// => 밑의 Phone p1 = new Phone() 을 사용하기 위해 추가함
	public Phone() {
	}

//	====================================
	public Phone(String company, int price, String number) {
		this.company = company;
		this.price = price;
		this.number = number;
	}

} // Phone

public class Ex07_Constructor {

	public static void main(String[] args) {
		// 1) default 생성자 확인

		Phone p1 = new Phone(); // => 위에서 생성자를 추가하게 되면 오류 (default 생성자 자동 생성되지 않음)

		p1.company = "삼성";
		p1.number = "010-1234-5678";
		p1.price = 20000;

		System.out.println("p1 : " + p1);

//		===========================================
		// 2) 생성자 호출

		Phone p2 = new Phone("애플");

		p2.number = "010-2345-6789";
		p2.price = p2.dataUp(640);

		System.out.println("p2 : " + p2);

//		============================================
		// 3) 인자 3개인 생성자 호출
		Phone p3 = new Phone("노키아", p1.dataUp(100), "010-1111-2222");

		System.out.println("p3 : " + p3);

	} // main

} // class